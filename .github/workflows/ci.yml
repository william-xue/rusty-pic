name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Test Rust
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -W clippy::all
    
    - name: Run tests
      run: cargo test --all-features

  test-javascript:
    name: Test JavaScript
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Check TypeScript
      run: pnpm run check
    
    - name: Run linting
      run: pnpm run lint
    
    - name: Check formatting
      run: echo "Format check not yet configured"
    
    - name: Run JavaScript tests
      run: echo "JavaScript tests not yet configured"

  build-wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: [test-rust, test-javascript]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build WASM package
      run: wasm-pack build --target web --out-dir ../../pkg crates/rusty-pic-wasm
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-package
        path: pkg/

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [build-wasm]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v4
      with:
        name: wasm-package
        path: pkg/
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build frontend
      run: pnpm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/